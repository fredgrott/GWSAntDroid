<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     Apr 23, 2013 2:15:31 PM                                                        

     GWSAntDroid    
     build scripts for android application development
                   
     fredgrott                                                                
     ====================================================================== -->
<project name="GWSAntDroid" default="default"
	xmlns:antcontrib="antlib:net.sf.antcontrib"
	xmlns:ivy="antlib:org.apache.ivy.ant"
	xmlns:oja="jwaresoftware.antxtras" 
	xmlns:emit="jwaresoftware.log4ant">
    <description>
            build scripts for android application development
    </description>
	
	<!-- collect all system proprties and prefix with env-->
	<property environment="env"/>
	<!-- sets TSTAMP,DSTAMP, etc to defaults -->
	<tstamp/>
	<!-- bootstrap, we load abootstrapstuf so we can assert
	     minimum requirements of build system,etc -->
	<property name="build.config.dir" 
		location="${basedir}/build.config"/>
	<property name="ant.bootstrap.dir" 
		location="${build.config.dir}/ant.bootstrap"/>
	<path id="bootstrap.path">
		<fileset dir="${ant.bootstrap.dir}" >
            <include name="ant-contrib-1.0b3.jar"/>
			<include name="ivy-2.3.0.jar"/>
        </fileset>
	</path>
	<!-- Location of Log4Ant antlib and thirdparty files,
	     note in log4ant example they missuse dirname poiting to 
	     dir with file which will not produce the expected result -->
	<path id="ourjware.path">
	                <fileset dir="${build.config.dir}/ant.bootstrap/dep">
	                    <include name="*/lib/*.jar"/>
	                </fileset>
	            <fileset dir="${build.config.dir}/ant.bootstrap">
	                 <include name="jw-log4ant.jar"/>
	                <include name="logback-access-1.0.9.jar"/>
	                <include name="logback-core-1.0.9.jar"/>
	                <include name="logback-classic-1.0.9.jar"/>
	             </fileset>
	        <pathelement 
	          location="${build.config.dir}/ant.bootstrap/etc"/>
	</path>
	<!-- antcontrib, antcontrib namespace -->
	<taskdef resource="net/sf/antcontrib/antlib.xml"
		uri="antlib:net.sf.antcontrib"
		classpathref="bootstrap.path"/>
	<!-- ivy, ivy namespace -->
	<taskdef resource="org/apache/ivy/ant/antlib.xml"
	    uri="antlib:org.apache.ivy.ant" 
		classpathref="bootstrap.path"/>
	<!-- load all antxtra libs taskdefs -->
	<taskdef uri="jwaresoftware.antxtras"
	    resource="org/jwaresoftware/antxtras/install/antlib-advanced.xml"
	    classpathref="ourjware.path"
	    loaderref="jware.classloader"/>
	<taskdef uri="jwaresoftware.log4ant"
	    resource="org/jwaresoftware/log4ant/install/antlib.xml"
	    loaderref="jware.classloader"/> 
	<!-- Wraps errors up to output and my logback.xml is set to 
	     use mdc to print out the target and task during ticks so 
	     we use less ant macros to wrap the tasks inside targets -->
	<presetdef name="wrap">
	   <oja:protect>
	      <oja:iferror capturethrown="last.error">
	         <emit:show messageid="E.something.failed" level="error">
	                    <include thrown="last.error"/>
	          </emit:show>
	          <oja:unassign reference="last.error"/>
	       </oja:iferror>
	   </oja:protect>
	</presetdef> 
	<!-- to time tasks -->
	<presetdef name="timed">
	  <oja:protect>
	    <oja:assign var="_#_${$fixture:target}" op="now"/>
	    <oja:always>
	      <emit:show level="info"
	        message="[T] ${$now:--${$var:_#_${$fixture:target}}|$duration:}"/>
	    </oja:always>
	  </oja:protect>
	</presetdef>
	<!--to log a task into a log file-->
	<macrodef name="wrapandlog">
    <attribute name="body"/>
   <attribute name="log-d" default="${logs.d}"/>
    <sequential>
      <oja:assert ismacro="@{body}" message="Macro '@{body}' exists"/>
      <oja:prewrap log-d="@{log-d}"/>
      <oja:capturelogs splitentries="yes">
       <oja:protect>
           <callinline macro="@{body}"/>                       <!-- do the wrapped task(s) -->
           <oja:iferror quiet="true" failvariable="${$x:target}.incomplete">
             <emit:show message="FAIL"
               tofile="@{log-d}/${$x:target}.status"/>         <!-- capture even if aborts -->
           </oja:iferror>
          <oja:always>
             <oja:copylogged tofile="@{log-d}/${$x:target}.log"/>  <!-- save all logged output -->
             <oja:do false="${$isset:${$x:target}.incomplete?v}">
               <oja:interpretlogged prefix="${$x:target}.check."
                     interpreter="anyerror-checker"/>          <!-- check output for issue -->
               <oja:domatch var="${$x:target}.check.result">
                 <oja:equals value="clean"/>
                 <oja:otherwise>
                 	<emit:show message="WARN"
                     tofile="@{log-d}/${$x:target}.status"/>   <!-- save record of issues -->
                 </oja:otherwise>
               </oja:domatch>
             </oja:do>
             <oja:postwrap/>                                       <!-- always clean-up -->
           </oja:always>
      </oja:protect>
     </oja:capturelogs>
   </sequential>
 </macrodef>
	
	<!-- mixed copy of build.template with our assert stuff from 
	     antxtras and our log stuff from log4ant -->
	
	<!-- The local.properties file is created and updated by the 'android' tool.
	         It contains the path to the SDK. It should *NOT* be checked into
	         Version Control Systems. -->
	    <property file="local.properties" />

	    <!-- The ant.properties file can be created by you. It is only edited by the
	         'android' tool to add properties to it.
	         This is the place to change some Ant specific build properties.
	         Here are some properties you may want to change/update:

	         source.dir
	             The name of the source directory. Default is 'src'.
	         out.dir
	             The name of the output directory. Default is 'bin'.

	         For other overridable properties, look at the beginning of the rules
	         files in the SDK, at tools/ant/build.xml

	         Properties related to the SDK location or the project target should
	         be updated using the 'android' tool with the 'update' action.

	         This file is an integral part of the build system for your
	         application and should be checked into Version Control Systems.

	         -->
	    <property file="ant.properties" />
	
	<!-- if sdk.dir was not set from one of the property file, then
	         get it from the ANDROID_HOME env var.
	         This must be done before we load project.properties since
	         the proguard config can use sdk.dir -->
	<condition property="sdk.dir" value="${env.ANDROID_HOME}">
	        <isset property="env.ANDROID_HOME" />
	</condition>
	<!-- The project.properties file is created and updated by the 'android'
	         tool, as well as ADT.

	         This contains project specific properties such as project target, and library
	         dependencies. Lower level build properties are stored in ant.properties
	         (or in .classpath for Eclipse projects).

	         This file is an integral part of the build system for your
	         application and should be checked into Version Control Systems. -->
	    <loadproperties srcFile="project.properties" />

	    <!-- quick check on sdk.dir -->
	    <fail
	            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
	            unless="sdk.dir"
	    />
	<!--load rest of stuff from ivy deps, 
	    each group gets loaded into its own 
	    pathid remember we are loading from 
	    a prepared ivy repo that is stored in user.home/.ivy2-->
    <ivy:retrieve/>
	<ivy:cachepath pathid="doclet.classpath" conf="doclet" />
	<ivy:cachepath pathid="anttask.classpath" conf="anttask"/>
	<!-- rest of taskdefs for our build stuff -->
	<taskdef resource="checkstyletask.properties"
	         classpathref="anttask.classpath"/>
	<taskdef name="classycleReport" classname="classycle.ant.ReportTask"
	         classpathref="anttask.classpath"/>
	<taskdef name="classycleDependencyCheck" 
	             classname="classycle.ant.DependencyCheckingTask"
	         classpathref="anttask.classpath"/>
	<taskdef name="javancss"
	            classname="javancss.JavancssAntTask"
	            classpathref="anttask.classpath"/>
	<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask"
	        classpathref="anttask.classpath"/>
	<taskdef  resource="com/zutubi/android/ant/antlib.xml" 
		classpathref="anttask.classpath"/>
	
	<!-- assert rest of our specialized build system components here-->
    <!-- log4an antxtras startlabels -->
	<oja:vendorinfo name="antxtras"/>
	<oja:show message="AntXtras: ${antxtras.build.label}"/>
	<emit:libcheck/>
	<emit:show message="${log4ant.label}"/> 
	<emit:show message="${slf4j.label}"/>
	<emit:show message="${slf4j-impl.label}"/>
	
	
	
	<!--
	        Import per project custom build rules if present at the root of the project.
	        This is the place to put custom intermediary targets such as:
	            -pre-build
	            -pre-compile
	            -post-compile (This is typically used for code obfuscation.
	                           Compiled code location: ${out.classes.absolute.dir}
	                           If this is not done in place, override ${out.dex.input.absolute.dir})
	            -post-package
	            -post-build
	            -pre-clean
	    -->
	
	<!-- custom rules targets go here -->
	
	
	<!-- copy of build file below  from sdk -->

    <!-- ================================= 
          target: default              
         ================================= -->
    <target name="default" depends="depends" description="build scripts for android application development">
        
    </target>

    <!-- - - - - - - - - - - - - - - - - - 
          target: depends                      
         - - - - - - - - - - - - - - - - - -->
    <target name="depends">
    </target>

</project>
